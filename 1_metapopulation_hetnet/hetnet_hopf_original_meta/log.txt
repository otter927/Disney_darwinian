20c20
< #include "colors.c"          // for monitoring purposes only
---
> //#include "colors.c"          // for monitoring purposes only
21a22
> #include "darwinian_rap.h"
36c37
< #define TYPE 4 // type of operator to turn input to output
---
> //#define TYPE 4 // type of operator to turn input to output
39,42c40,43
< #define N           100  // number of neurons (200) // if Nk landscape is used, the maximal value of N is 63!
< #define P           10   // partition size; must be an integer that divides N (only if blockFitness is used)
< #define T           2   // number of optima per block (only if blockFitness is used)
< #define B       	  N/P // number of blocks per sequence (only if blockFitness is used)
---
> //#define N           100  // number of neurons (200) // if Nk landscape is used, the maximal value of N is 63!
> //#define P           10   // partition size; must be an integer that divides N (only if blockFitness is used)
> //#define T           2   // number of optima per block (only if blockFitness is used)
> //#define B       	  N/P // number of blocks per sequence (only if blockFitness is used)
51,52c52,53
< #define DN       DX*DY // total deme number
< #define NN       100      // population size of a deme (number of networks)
---
> //#define DN       DX*DY // total deme number
> //#define NN       100      // population size of a deme (number of networks)
58c59
< #define RECOMBINATION 0. //(0.1)    // probability of recombining two output sequences; if not recombination, migration
---
> #define RECOMBINATION 1.0//0. //(0.1)    // probability of recombining two output sequences; if not recombination, migration
60c61
< #define MUTATION      (1.0/(float)N) // per-bit mutation rate of selected re-entered output of previous generation
---
> #define MUTATION      1.0//(1.0/(float)N) // per-bit mutation rate of selected re-entered output of previous generation
65c66
< #define ENVNUM     2       // number of different environments to cycle through (use ENVNUM = 1 and ENVLEN > MAXT for stable environment; ENVNUM = 0 won't work; Note, that if ENVNUM > 1, global optimum is set accordingly!)
---
> //#define ENVNUM     2       // number of different environments to cycle through (use ENVNUM = 1 and ENVLEN > MAXT for stable environment; ENVNUM = 0 won't work; Note, that if ENVNUM > 1, global optimum is set accordingly!)
77c78
< #define TRAINNUM   40    // number of networks to be trained with the same output (only if TYPE >= 4)
---
> #define TRAINNUM   40//40    // number of networks to be trained with the same output (only if TYPE >= 4)
82,83c83,84
< #define STORETEST     1    // test storedness of output (only used if TYPE == 4; otherwise sometimes it is automatically on)
< #define STOREMAX      1000    // maximal number of stored patterns per network; only used for tracking learned patterns; theoretical capacity is: N/sqrt(2*log(N));
---
> //#define STORETEST     1    // test storedness of output (only used if TYPE == 4; otherwise sometimes it is automatically on)
> //#define STOREMAX      1000    // maximal number of stored patterns per network; only used for tracking learned patterns; theoretical capacity is: N/sqrt(2*log(N));
91,114d91
< // General landscape variables
< float globalOptimumS[N];
< float globalOptimumW;
< float globalOptimumAll[ENVNUM][N]; // store optimum for each environment (for Pearson or Hamming fitnesses)
< // Block landscape
< float blockOptimaSequence[B][T][P]; // store local optima sequences for each block (for block fitness only)
< float blockOptimaFitness [B][T];    // store local optima fitnesses for each block (for block fitness only)
< 
< // Auxiliary
< int matrixNeighbors[DN][8]; // spatial deme neighbors
< int STORE = (TYPE == 5) || (TYPE == 6) || (TYPE == 7) || ((TYPE == 4) && STORETEST); // store learned patterns in `stored` array
< int PN; // if `STORE`, store this many learned patterns
< int learnCounter[DN][NN];
< 
< typedef struct DEME {
<   float w[NN], minW, maxW, avgW, input[NN][N], output[NN][N], test[NN][N], maxOutput[N], weight[NN][N][N];
< 	int   minP, maxP, storedQ[NN], storedP[NN];
< 	float storedD[NN], stored[NN][STOREMAX][N];
< } DEME;
< DEME deme[DN];
< 
< 
< 
< 
119c96
< float pearsonCorrelation(float *u, float *v) { // Pearson product-moment correlation coefficient of vectors `u` and `v`
---
> float Darwinian_deme::pearsonCorrelation(float *u, float *v) { // Pearson product-moment correlation coefficient of vectors `u` and `v`
139c116
< float pearsonFitness(float *v) {
---
> float Darwinian_deme::pearsonFitness(float *v) {
143c120
< int hammingDistanceN(float *v, float *u, int n) { // standard HD up to length `n`
---
> int Darwinian_deme::hammingDistanceN(float *v, float *u, int n) { // standard HD up to length `n`
149c126
< int hammingDistance(float *v, float *u) { // standard HD of length N
---
> int Darwinian_deme::hammingDistance(float *v, float *u) { // standard HD of length N
155c132
< float relativeHammingDistance(float *v, float *u) { // HD/N
---
> float Darwinian_deme::relativeHammingDistance(float *v, float *u) { // HD/N
159c136
< float hammingFitness(float *v) { // 1 - (HD/N)
---
> float Darwinian_deme::hammingFitness(float *v) { // 1 - (HD/N)
163c140
< int randomMinPosition(float *v, int n) { // selects the position of the smallest value in vector `v` up to length `n`; if there are multiple instances, selects one randomly.
---
> int Darwinian_deme::randomMinPosition(float *v, int n) { // selects the position of the smallest value in vector `v` up to length `n`; if there are multiple instances, selects one randomly.
185c162
< int randomMaxPosition(float *v, int n) { // selects the position of the largest value in vector `v` up to length `n`; if there are multiple instances, selects one randomly.
---
> int Darwinian_deme::randomMaxPosition(float *v, int n) { // selects the position of the largest value in vector `v` up to length `n`; if there are multiple instances, selects one randomly.
207c184
< int firstMaxPosition(float *v, int n) { // selects the position of the largest value in vector `v` up to length `n`; if there are multiple instances, selects last (to the right).
---
> int Darwinian_deme::firstMaxPosition(float *v, int n) { // selects the position of the largest value in vector `v` up to length `n`; if there are multiple instances, selects last (to the right).
220c197
< int samePatternQ(float *u, float *v) { // boolean test of pattern identity
---
> int Darwinian_deme::samePatternQ(float *u, float *v) { // boolean test of pattern identity
229c206,211
< void copyPattern(float *to, float *from) {
---
> void Darwinian_deme::copyPattern(float *to, float *from_t) {
> 	int i;
> 	for(i = 0; i < N; i++) to[i] = from_t[i];
> }
> 
> void Darwinian_deme::copyPatternNN(float *to, float *from_t) {
231c213,217
< 	for(i = 0; i < N; i++) to[i] = from[i];
---
> 	for(i = 0; i < NN; i++) {
> 	    //printf("a:%f\n", from[i]);
> 	    //printf("b:%f\n", to[i]);
> 	    to[i] = from_t[i];
> 	}
234c220
< void invertPattern(float *v) { // flip each bit in vector `v`
---
> void Darwinian_deme::invertPattern(float *v) { // flip each bit in vector `v`
239c225
< void printPattern(float *v) {
---
> void Darwinian_deme::printPattern(float *v) {
250c236
< const char *vectorToString(float *v, int n) { // cannot be called multiple times in e.g. printf!
---
> const char *Darwinian_deme::vectorToString(float *v, int n) { // cannot be called multiple times in e.g. printf!
261c247
< void mutatePattern(float *v, float mut) { // mutate pattern per-digit mutation rate `mut`
---
> void Darwinian_deme::mutatePattern(float *v, float mut) { // mutate pattern per-digit mutation rate `mut`
266c252
< void exactlyMutatePattern(float *v, float mut) { // mutates exactly `mut*N` bits (maximally N)
---
> void Darwinian_deme::exactlyMutatePattern(float *v, float mut) { // mutates exactly `mut*N` bits (maximally N)
278c264
< void mutateSinglebitPattern(float *v, float mut) {
---
> void Darwinian_deme::mutateSinglebitPattern(float *v, float mut) {
284c270
< void randomPattern(float *v, float mut) { // generates a random pattern with `mut` probability that a bit is +1
---
> void Darwinian_deme::randomPattern(float *v, float mut) { // generates a random pattern with `mut` probability that a bit is +1
289c275
< void alternatingPattern(float *v, int l, int start) { // alternating +1.0 and -1.0 with partition length `l`, starting with `start` (1 -> +1.0, else -> -1.0) 
---
> void Darwinian_deme::alternatingPattern(float *v, int l, int start) { // alternating +1.0 and -1.0 with partition length `l`, starting with `start` (1 -> +1.0, else -> -1.0) 
298c284
< void continuousPattern(float *v, int from, int to) { // [---..+++..---] where + subpattern runs from `from` to `to-1`
---
> void Darwinian_deme::continuousPattern(float *v, int from_t, int to) { // [---..+++..---] where + subpattern runs from `from` to `to-1`
301c287
< 	for(i = 0; (i < from) && (i < N); i++) v[i] = -1.0;
---
> 	for(i = 0; (i < from_t) && (i < N); i++) v[i] = -1.0;
306c292
< void correlatePattern(float *v, float corr) { // generate a partially uncorrelated version of vector `v` (saving back to `v`)
---
> void Darwinian_deme::correlatePattern(float *v, float corr) { // generate a partially uncorrelated version of vector `v` (saving back to `v`)
322c308
< void recombinePattern(float * u, float * v) { // two-point recombination
---
> void Darwinian_deme::recombinePattern(float * u, float * v) { // two-point recombination
340c326
< void setWeights(void) {
---
> void Darwinian_deme::setWeights() {
345c331
< void randomWeights(void) {
---
> void Darwinian_deme::randomWeights() {
350c336
< void storePattern(float *v, int d, int n) { // tests if `v` is stored in network `n` at deme `d` or not, and pushes/stores it to most recent position (on the right)
---
> void Darwinian_deme::storePattern(float *v, int d, int n) { // tests if `v` is stored in network `n` at deme `d` or not, and pushes/stores it to most recent position (on the right)
359c345
< void trainNetwork(float *v, int d, int n) { // training network `n` in deme `d` with vector `v`, updating `weight`
---
> void Darwinian_deme::trainNetwork(float *v, int d, int n) { // training network `n` in deme `d` with vector `v`, updating `weight`
369c355
< void trainNetworksRandom(int n) { // train each network on `n` random patterns (and store these patterns if `STORE == 1`)
---
> void Darwinian_deme::trainNetworksRandom(int n) { // train each network on `n` random patterns (and store these patterns if `STORE == 1`)
372a359
> 	        //printf("n:%d", n);
379c366
< void updateOutput(float *v, int d, int n, int i) { // update of neuron `i` in network `n` in deme `d` with threshold neuron model
---
> void Darwinian_deme::updateOutput(float *v, int d, int n, int i) { // update of neuron `i` in network `n` in deme `d` with threshold neuron model
387c374
< void updateNetwork(float *v, int d, int n) { // updating network 'n' in deme `d` with input `v`; output is written into `v`
---
> void Darwinian_deme::updateNetwork(float *v, int d, int n) { // updating network 'n' in deme `d` with input `v`; output is written into `v`
392c379
< void shuffleOutputs(int d) { // shuffle `output` population for deme `d`
---
> void Darwinian_deme::shuffleOutputs(int d) { // shuffle `output` population for deme `d`
404c391
< float testAgainst(int e, int iter) { // tests all networks of all demes `iter` times against the global optimum of environment `e`, returning average per-bit relative distance
---
> float Darwinian_deme::testAgainst(int e, int iter) { // tests all networks of all demes `iter` times against the global optimum of environment `e`, returning average per-bit relative distance
420c407
< int closestStored(float *v, int d, int n) { // returns the index of the stored pattern that is closest to `v` in deme `d`, network `n`
---
> int Darwinian_deme::closestStored(float *v, int d, int n) { // returns the index of the stored pattern that is closest to `v` in deme `d`, network `n`
430c417
< void setBlockOptimaDefault(int env) { // sets the same T optima (sequence and fitness) for the B blocks in environment `env` {1, 2, ...}
---
> void Darwinian_deme::setBlockOptimaDefault(int env) { // sets the same T optima (sequence and fitness) for the B blocks in environment `env` {1, 2, ...}
447c434
< float blockGlobalOptimumFitness(void) { // calculates global optimum using `blockOptimaSequence` and `blockOptimaFitness`
---
> float Darwinian_deme::blockGlobalOptimumFitness() { // calculates global optimum using `blockOptimaSequence` and `blockOptimaFitness`
464c451
< void blockGlobalOptimumSequence(float *v) { // calculates global optimum using `blockOptimaSequence` and `blockOptimaFitness`
---
> void Darwinian_deme::blockGlobalOptimumSequence(float *v) { // calculates global optimum using `blockOptimaSequence` and `blockOptimaFitness`
480c467
< float blockFitness(float *v) { // building block fitness; rescales range (min, max) to (min/max, 1.0)
---
> float Darwinian_deme::blockFitness(float *v) { // building block fitness; rescales range (min, max) to (min/max, 1.0)
495c482
< void setLandscape(int ls, int env) { // sets `globalOptimumS` and `globalOptimumW`
---
> void Darwinian_deme::setLandscape(int ls, int env) { // sets `globalOptimumS` and `globalOptimumW`
505,511d491
< 		if(VERBOSE) {
< 			printf("\tBlock target optima ({N=%d P=%d B=%d T=%d):\n", N, P, B, T);
< 			for(i = 0; i < B; i++) {
< 				printf("\tBLOCK #%d\n", i);
< 				for(j = 0; j < T; j++) printf("\t\tT%d %s %f\n", j, vectorToString(blockOptimaSequence[i][j], P), blockOptimaFitness[i][j]);
< 			}
< 		}
514,517d493
< 	if(VERBOSE) {
< 		printf("\tnew environment: E%d\n", env);
< 		printf("\tglobal optimum:  %s %f\n\n", vectorToString(globalOptimumS, N), globalOptimumW);
< 	}
523c499
< void setNeighborDemes(int n, int m) { // sets up a lookup table for neughboring positions for each matrix element; 8 neighbours, no periodic boundary
---
> void Darwinian_deme::setNeighborDemes(int n, int m) { // sets up a lookup table for neughboring positions for each matrix element; 8 neighbours, no periodic boundary
549a526
> void Darwinian_deme::evolution_initialization(int t) {
551,557c528,531
< 
< 
< 
< int main(int argc, char** argv) {
< 	int i, j, k, d, e, t = 0, terminateSum = 0, environmentC = 0, LANDSCAPE = 0, learnC = 0;
< 	float bestTest[ENVNUM] = {0};
< 
---
>         int i, j, k, d, e = 0; 
>         
>         test = 2;
>         printf("init:%d\n", test);
561c535
< 	
---
> 	int LANDSCAPE = 2;
564,570c538,544
< 	if(strcmp("pearsonFitness", FITNESSNAME) == 0) LANDSCAPE = 1; else
< 	if(strcmp("hammingFitness", FITNESSNAME) == 0) LANDSCAPE = 2; else
< 	if(strcmp("blockFitness",   FITNESSNAME) == 0) LANDSCAPE = 3; else {
< 		printf("Invalid fitness function %s. Aborting.\n", FITNESSNAME);
< 		exit(1);
< 	}
< 	if(LANDSCAPE == 1) for(e = 0; e < ENVNUM; e++) alternatingPattern(globalOptimumAll[e], N/2, (e==0));   else // pearsonFitness; [++..--..] for E0, [--..++..] for any other Ei
---
> 	//if(strcmp("pearsonFitness", FITNESSNAME) == 0) *LANDSCAPE = 1; else
> 	//if(strcmp("hammingFitness", FITNESSNAME) == 0) *LANDSCAPE = 2; else
> 	//if(strcmp("blockFitness",   FITNESSNAME) == 0) *LANDSCAPE = 3; else {
> 	//	printf("Invalid fitness function %s. Aborting.\n", FITNESSNAME);
> 	//	exit(1);
> 	//}
> 	//if(*LANDSCAPE == 1) for(e = 0; e < ENVNUM; e++) alternatingPattern(globalOptimumAll[e], N/2, (e==0));   else // pearsonFitness; [++..--..] for E0, [--..++..] for any other Ei
573,576d546
< 	if(VERBOSE) {
< 		printf("LANDSCAPE: %s %d\n", FITNESSNAME, LANDSCAPE);
< 		for(i = 0; i < ENVNUM; i++) printPattern(globalOptimumAll[i]);
< 	}
594,607c564,573
< 	if(VERBOSE) {
< 		printf("Method: %d\n", TYPE);
< 		printf("\tDN=%d (%d x %d)   spatial=%d   NN=%d \n", DN, DX, DY, SPATIAL, NN);
< 		printf("\tstore=%d   N=%d   C(exp)=%f   C(act)=%d\n", STORE, N, N/sqrt(2.0*log((float)N)), PN);
< 		printf("\tN(env)=%d   L(env)=%d    pop.reset? %d\n", ENVNUM, ENVLEN, ENVPOP);
< 		printf("\n");
< 	}
< 	
< 	
< 	
< 	// Generations
< 	while((t <= MAXT) && (((ENDT > 0) && (terminateSum < ENDT)) || (ENDT == 0))) {
< 		int bestD = -99, bestP = -99, recombineC = 0, migrateC = 0;
< 		float avgW = 0, bestW = -99., storedC = 0.0;
---
> 
> }
> 
> void Darwinian_deme::evolution_gen_environment(int t) {
> 
>     	        int i, j, k, d, e = 0; 
> 
>      	        int LANDSCAPE = 2;
> 
>                 printf("init:%d\n", test);
611c577
< 		if((TESTBEST) > 0 && ((t % (TESTBEST)) == 0)) for(i = 0; i < ENVNUM; i++) bestTest[i] = testAgainst(i, 100);
---
> 		//if((TESTBEST) > 0 && ((t % (TESTBEST)) == 0)) for(i = 0; i < ENVNUM; i++) bestTest[i] = testAgainst(i, 100);
617c583
< 			setLandscape(LANDSCAPE, environmentC);
---
> 			setLandscape(LANDSCAPE, t % (ENVNUM));
625c591
< 			if(environmentC == (ENVNUM-1)) environmentC = 0; else environmentC++;
---
> 			//if(*environmentC == (ENVNUM-1)) *environmentC = 0; else *environmentC++;
627a594
> 
648c615
< 			learnC = 0;
---
> 			//*learnC = 0;
651a619,628
> 
> 
> }
> 
> DEME *Darwinian_deme::evolution_gen_update(int t) {
> 
>     	        int i, j, k, d, e = 0; 
> 
>                 //printf("a\n");
> 
657c634
< 				for(i = 0; i < NN; i++) copyPattern(deme[d].input[i], deme[d].output[i]); // save input for comparison (for TYPE == 5 or for STORETEST == 1)
---
> 				for(i = 0; i < NN; i++) copyPattern(deme[d].input_t[i], deme[d].output[i]); // save input for comparison (for TYPE == 5 or for STORETEST == 1)
663c640,642
< 				if(TYPE == 4) {for(i = 0; i < NN; i++) updateNetwork(deme[d].output[i], d, i);        } else  // 4 = AANN
---
> 				if(TYPE == 4) {for(i = 0; i < NN; i++) {updateNetwork(deme[d].output[i], d, i);        
> 				                //printf("c\n");
> }} else  // 4 = AANN
674c653,667
< 				
---
>                }
>                 //printf("b\n");
>                
>                return(deme);
> 
> 
> }
> 
> 
> void Darwinian_deme::evolution_gen_calcfitness(int t) {
> 
>     	        int i, j, k, d, e = 0; 
> 
>                /* Calculate Fitness */				
> 		for(d = 0; d < DN; d++) {
694c687
< 						copyPattern(deme[d].test[i], deme[d].input[i]);
---
> 						copyPattern(deme[d].test[i], deme[d].input_t[i]);
708c701
< 							// printf("ERROR: randomMinPosition could not find the appropriate minimum! Aborting.\n");
---
> 							// printf("ERROR: randomMin	int LANDSCAPE = 2 Position could not find the appropriate minimum! Aborting.\n");
716c709
< 					storedC += deme[d].storedQ[i];						
---
> 					//*storedC += deme[d].storedQ[i];						
721a715,725
>                }
> 
> 
> }
> 
> float *Darwinian_deme::evolution_gen_calcbestfitness(int t) {
> 
>     	        int i, j, k, d, e = 0; 
>     	        int bestD = -99, bestP = -99;
> 	        float avgW = 0, bestW = -99., worstW = 1000.;
> 
722a727
> 		for(d = 0; d < DN; d++) {
736a742,744
> 			if(deme[d].minW < worstW){
> 			        worstW = deme[d].minW;
> 			}
739a748,749
> 		//if((bestW == 1.0)) terminateSum++; else terminateSum = 0;
> 
742,768c752,762
< 		if(VERBOSE) {
< 		//if((t > 10980) && (t < 10983)) {
< 			printf("T%d\n", t);
< 			for(d = 0; d < DN; d++) {
< 				printf("  D%d\n", d);
< 				for(i = 0; i < NN; i++) {
< 					if((d == bestD) && (i == bestP)) {
< 						printCyan ("\tN%d %s %f", i, vectorToString(deme[d].output[i], N), deme[d].w[i]);
< 					} else if(i == deme[d].maxP) {
< 						printGreen("\tN%d %s %f", i, vectorToString(deme[d].output[i], N), deme[d].w[i]);
< 					} else if(i == deme[d].minP) {
< 						printRed  ("\tN%d %s %f", i, vectorToString(deme[d].output[i], N), deme[d].w[i]);
< 					} else {
< 						printf    ("\tN%d %s %f", i, vectorToString(deme[d].output[i], N), deme[d].w[i]);
< 					}
< 					if(TYPE >= 4) printf("\t%d #%d: %f", deme[d].storedQ[i], deme[d].storedP[i], deme[d].storedD[i]);
< 					printf("\n");
< 					
< 					// for(j = 0; j < NN; j++) {
< 						// printf("\tS%d ", j);
< 						// printPattern(deme[d].stored[i][j]);
< 						// printf("\n");
< 					// }
< 					
< 					fflush(stdout);
< 				}
< 			}
---
> 		if(!(t % (RESOLUTION))) {
> 
> 			printf("darwinian: %d\t%f\t%f\t%f\t%d\t%d\t%f\t%f\t", t, bestW, avgW/(float)DN, worstW, deme[bestD].storedQ[bestP], deme[bestD].storedP[bestP], deme[bestD].storedD[bestP]);
> 			//if(STORE) for(d = 0; d < DN; d++) {
> 			//	for(i = 0; i < NN; i++) printf("%d\t", deme[d].storedP[i]);
> 			//	//for(i = 0; i < NN; i++) printf("%f\t", deme[d].storedD[i]);
> 			//	if(DN > 1) printf("\n");
> 			//}
> 			////if((TESTBEST) > 0) for(e = 0; e < ENVNUM; e++) printf("%f\t", bestTest[e]);
> 			printf("\n");
> 			fflush(stdout);
770a765,824
> 		return(deme[bestD].output[bestP]);
> 
> }
> 
> void Darwinian_deme::evolution_gen_calcmutation(int t) {
> 
>         	        int i, j, k, d, e = 0; 
> 
> 			for(d = 0; d < DN; d++) {
>                                if (deme[d].recombination == 1) {
> 					deme[d].w1 = FITNESS(deme[d].v1);
> 					deme[d].w2 = FITNESS(deme[d].v2);
> 					if(deme[d].w1 < deme[d].w2) {
> 						copyPattern(deme[d].v1, deme[d].v2);
> 						deme[d].w1 = deme[d].w2;
> 					}                               
>                                } else {
> 					deme[d].w1 = FITNESS(deme[d].v1);                               
>                                }
> 
>                        }
> 
> }
> 
> void Darwinian_deme::evolution_gen_replacemutation(int t) {
> 
>         	        int i, j, k, d, e = 0; 
> 
> 			for(d = 0; d < DN; d++) {
> 				/* Replication & learn */
> 				if(deme[d].w1 > deme[d].minW) {
> 
> 					if(REPLACE == 0) {copyPattern(deme[d].output[deme[d].minP], deme[d].v1);} else // replace the worst patterns in the output (choosing one randomly, if there are multiple)
> 					if(REPLACE == 1) {for(i = 0; i < NN; i++); copyPattern(deme[d].output[i], deme[d].v1);} else // replace ALL of the output population with the new output
> 					if(REPLACE == 2) {copyPattern(deme[d].output[randl(NN)], deme[d].v1);} // replace ONE pattern randomly
> 					
> 					if((TYPE >= 4) && (t < MAXTRAINT)) { // Learning
> 						int pos[NN] = {0};
> 						float toLearn[N];
> 						for(k = 0; k < ((TRAINNUM>NN)?NN:TRAINNUM); k++) { // the best pattern is assured to be trained to TRAINNUM *different* networks (faster convergence)
> 							do i = randl(NN); while(pos[i]);
> 							pos[i] = 1;
> 							copyPattern(toLearn, deme[d].v1);
> 							mutatePattern(toLearn, TRAINNOISE);
> 							trainNetwork(toLearn, d, i);
> 
> 							/* Store if learned */
> 							//*learnC++;
> 							if(STORE) storePattern(toLearn, d, i); // Store learnt patterns in `stored` only if there is no identical already
> 						}
> 					}
> 				}			
> 			} // deme `d`
> 
> 
> }
> 
> DEME *Darwinian_deme::evolution_gen_selection(int t) {
> 
>         	        int i, j, k, d, e = 0; 
772,773d825
< 		if(t > 0) { // skip this in the first turn
< 		
777c829
< 				float w1, v1[N];
---
> 				//float w1, v1[N];
783c835
< 					float w2, v2[N];
---
> 					//float w2, v2[N];
784a837
> 					deme[d].recombination = 1;
786,787c839,840
< 					recombineC++;
< 					copyPattern(v1, deme[d].output[p1]);
---
> 					//*recombineC++;
> 					copyPattern(deme[d].v1, deme[d].output[p1]);
799,800c852,853
< 						copyPattern(v2, deme[e].output[p2]);
< 						migrateC++;
---
> 						copyPattern(deme[d].v2, deme[e].output[p2]);
> 						//*migrateC++;
803,810c856,857
< 						copyPattern(v2, deme[d].output[p2]);
< 					}
< 					recombinePattern(v1, v2);
< 					w1 = FITNESS(v1);
< 					w2 = FITNESS(v2);
< 					if(w1 < w2) {
< 						copyPattern(v1, v2);
< 						w1 = w2;
---
> 						copyPattern(deme[d].v2, deme[d].output[p2]);
> 
811a859
> 					recombinePattern(deme[d].v1, deme[d].v2);
812a861
> 					deme[d].recombination = 0;
814,816c863,864
< 					copyPattern(v1, deme[d].output[p1]);
< 					mutatePattern(v1, (MUTATION));
< 					w1 = FITNESS(v1);
---
> 					copyPattern(deme[d].v1, deme[d].output[p1]);
> 					mutatePattern(deme[d].v1, (MUTATION));
817a866,868
>                        }
>                        
>                        return(deme);
819,820c870
< 				/* Replication & learn */
< 				if(w1 > deme[d].minW) {
---
> }
822,834c872,878
< 					if(REPLACE == 0) {copyPattern(deme[d].output[deme[d].minP], v1);} else // replace the worst patterns in the output (choosing one randomly, if there are multiple)
< 					if(REPLACE == 1) {for(i = 0; i < NN; i++); copyPattern(deme[d].output[i], v1);} else // replace ALL of the output population with the new output
< 					if(REPLACE == 2) {copyPattern(deme[d].output[randl(NN)], v1);} // replace ONE pattern randomly
< 					
< 					if((TYPE >= 4) && (t < MAXTRAINT)) { // Learning
< 						int pos[NN] = {0};
< 						float toLearn[N];
< 						for(k = 0; k < ((TRAINNUM>NN)?NN:TRAINNUM); k++) { // the best pattern is assured to be trained to TRAINNUM *different* networks (faster convergence)
< 							do i = randl(NN); while(pos[i]);
< 							pos[i] = 1;
< 							copyPattern(toLearn, v1);
< 							mutatePattern(toLearn, TRAINNOISE);
< 							trainNetwork(toLearn, d, i);
---
> void Darwinian_deme::return_fitness(float *w, int d) {
>         //printf("H\n");
>         //printf("%f\t%f\t%d\n", w[0], w[1], d);
>         //printf("%f\t%f\n", deme[d].w[0], deme[d].w[1]);
>         copyPatternNN(deme[d].w, w);
>         //printf("I\n");
> }
836,843c880,894
< 							/* Store if learned */
< 							learnC++;
< 							if(STORE) storePattern(toLearn, d, i); // Store learnt patterns in `stored` only if there is no identical already
< 						}
< 					}
< 				}			
< 			} // deme `d`
< 		}
---
> void Darwinian_deme::return_fitness_mutate(float *w, int d) {
>         //printf("w1%f\t%f\n", deme[d].w1, w[0]);
>         //printf("w2%f\t%f\n", deme[d].w1, w[1]);
>         deme[d].w1 = w[0];
>         deme[d].w2 = w[1];
> }
> 
> 
> void Darwinian_deme::evolution() {
>         int i, j, k, d, e = 0;
>         int t = 0;
>         //float bestTest[ENVNUM] = {0};
>         
> 
> 	evolution_initialization(t);
844a896,898
> 	// Generations
> 	//while((t <= MAXT) && (((ENDT > 0) && (terminateSum < ENDT)) || (ENDT == 0))) {
> 	while (t <= MAXT) {
846,847c900,908
< 		//if(VERBOSE && (bestW == 1.0)) terminateSum++; else terminateSum = 0;
< 		if((bestW == 1.0)) terminateSum++; else terminateSum = 0;
---
> 	        evolution_gen_environment(t);
> 	
> 	        evolution_gen_update(t);
>                
> 		evolution_gen_calcfitness(t);
> 
> 		for(d = 0; d < DN; d++) {
> 		    return_fitness(deme[d].w, d);
> 		}
848a910
> 		evolution_gen_calcbestfitness(t);	
849a912,914
> 
> 
> 		if(t > 0) { // skip this in the first turn
851c916
< 		if(!(t % (RESOLUTION))) {
---
> 		    evolution_gen_selection(t);
853,862c918,930
< 			printf("%d\t%f\t%f\t%d\t%d\t%f\t%d\t%f\t", t, bestW, avgW/(float)DN, deme[bestD].storedQ[bestP], deme[bestD].storedP[bestP], deme[bestD].storedD[bestP], learnC, (float)storedC/(float)(DN*NN));
< 			if(STORE) for(d = 0; d < DN; d++) {
< 				for(i = 0; i < NN; i++) printf("%d\t", deme[d].storedP[i]);
< 				//for(i = 0; i < NN; i++) printf("%f\t", deme[d].storedD[i]);
< 				if(DN > 1) printf("\n");
< 			}
< 			if((TESTBEST) > 0) for(e = 0; e < ENVNUM; e++) printf("%f\t", bestTest[e]);
< 			printf("\n");
< 			fflush(stdout);
< 		}
---
> 		    evolution_gen_calcmutation(t);
> 
> 
> 		    for(d = 0; d < DN; d++) {
>    		        return_fitness(deme[d].w, d);
>    		    }
>    		    
>    		    
> 		    evolution_gen_replacemutation(t);
> 
> 		    //for(d = 0; d < DN; d++) {
>    		    //   return_fitness_mutate(deme[d].w, d);
>    		    //}
863a932,933
> 		}
> 	
871c941
<   return(0);
---
> 
872a943,949
> 
> int main(int argc, char** argv) {
>   Darwinian_deme a;
>   a.evolution();
> }
> 
> 
